To do:

- Export components to Houdini
	-Read json in Houdini and generate node for each one

- Meshes should be referred to by name, just like materials and textures

- Serialization should detect Vectors and Colors and automatically handle convertion to/from arrays
	-Most used Enums as well?

- Clean up examples.
	- provide a more advanced 2d example
	- simplify where possible
	- GLTF animation example

- Test Houdini-To-Monkey model pipeline

- Generalize serialization 
	- Remove references to game3d
	- Add some way to extend specific classes, and implement that into game3d

------------------------------------------------------------------------------------------------------------------------

Wishlist:

- Transfer all Environment variables in json format:
	- Env Color
	- Env texture
	- Ambient light
	- Bg Color
	- Bg Texture
	- Clear color
	- Fog


------------------------------------------------------------------------------------------------------------------------

Done!

- Width/Height echo should report true window size
- Investigate
	- Mojo Physics
		- Ray cast
	- Project a point from 3d to 2d
- BaseObject Component? Would include name, transforms, tags, etc.
- Material lookup by name? Would allow sharing of materials, no need for material components.
	- Another solution: material component that looks up a material by name... :-)
- Component .json
	-Loading object arrays returns empty - fixed
	-Components need "deep" serialization (include super class parameters) - fixed
- Rename OnCreate to something more clear? OnAssign? OnAdded?
- Break Load and Save functions per class:
	- Get rid of DeserializeGameObjects, Use GameObject.Load
	- Get rid of MaterialLibrary.Save and Load, use Material.Load, Material.Save, Texture.Load, Texture.Save
- Wireframe component
- Update old examples
- "Hot reloading" of scenes (no recompiling!)
- Morpher: Get single GameObject, multiple Entities working (currently doesn't render, and requires too many "elvises")